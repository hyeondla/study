javac : 컴파일러 → 컴퓨터가 알아들을 수 있도록 번역 
java : 런처 → 실행
Hello.java 컴파일 → Hello.class 생성 → JVM

JDK
JRE

==========================================

▶ 이클립스 설정

Window > Perspective > Open Perspective > Java → Open, Java EE → close
Window > Show View → 선택 
           > Perspective > Reset Perspective → 초기화
Window > Preferences > General > Appearance > Colors and Fonts > Basic > Text Font
							  > Java > Java Editor Text Font
Window > Preferences > General > Editors > Text Editors > Spelling > Enable spell checking 체크 해제
Window > Preferences > General > Workspace > Text file encoding > Other : UTF-8
Window > Preferences > Java > Code Syle > Formatter > New > Indentation > Tab policy
Window > Preferences > Java > Code Syle > Organize Imports
Window > Preferences > Java > Compiler > Compiler compliance level : 1.8
Window > Preferences > Java > Installed JREs > Add > Next > Directory 
> C:\Program Files\Java\jre1.8.0_281 폴더 선택 > Finish > 281 체크, 다른거 remove

==> workspace 복사하면 설정 똑같이


d:\workspace_java3\.metadata 환경설정값 들어있음

==========================================================

Create a Java Project
Project name 첫글자 → 대문자
Class name 첫글자 → 대문자
JavaSE-1.8

Ctrl + Space Bar 자동완성
syso + 자동완성 → System.out.println();

Ctrl + D → 줄 삭제
Ctrl + Shift + C → 주석
Ctrl + / → 주석

=======================================================

변수
상수
리터럴

RAM 휘발성

식별자(Identifier)
- 클래스명, 메서드명, 변수명

식별자 작성 규칙
< 필수 사항 >
1. 첫 글자에 숫자 사용 불가
2. 특수문자 $ 와 _ 기호만 사용 가능
3. 영문 대,소문자 구별
4. 공백 사용 불가
5. 예약어 사용 불가
< 권장 사항 >
1. 의미 있는 단어 사용, 길이 제한 없음
2. 한글 사용 가능하지만 사용하지 않음
3. 영문 두 단어 이상의 조합일 경우 두번째 단어부터
   단어 첫 글자를 대문자로 작성

기억용량 bit
1 Byte = 8 bit
1 KB = 1024 ≒ 10^3 Byte
MB ≒ 10^6 Byte
GB ≒ 10^9 Byte
TB

전송속도 sec
1 ms = 0.001 sec

2^7 = 128
2^8 = 256
2^10 = 1024
2^16 = 65536

아스키코드 (ASCII, 7bit)
'A' = 65
'a' = 97
'0' = 48
10진수 코드값 사용
입력시 16진수 코드 4자리 \uxxxx

byte <-> char 명시적 형변환 필수
short <-> char 명시적 형변환 필수
int <- char 자동 형변환

 byte < short < int < long < float < double
(    char     )

=========================================

산술 연산 시 자동 형변환

1)int 타입보다 작은 타입(byte, short,char)끼리의 연산은
  모두 int 타입으로 변환 후 연산 수행

2) int 타입 이상의 타입과의 연산은 큰 타입으로 변환 후 수행


정수 산술 연산을 실수로 표현하고 싶을 때
=> 피연산자 중 하나를 실수로 변환
   수치 데이터 => .0 붙여서 실수로 변환
   실수형 변수 => 형변환 연산자(double, float)로 변환

float + double -> double + double -> double 
근사치 표현에 의해 잘못된 결과 발생 가능
=> double -> float 강제변환 

리터럴끼리 연산시 자동 형변환 X

===========================================


















































































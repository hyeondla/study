package bit_operator;

public class Ex {

	public static void main(String[] args) {

		// 비트 단위 논리연산자 
		// AND(&), OR(|), NOT(~), XOR(^)
		// 정수에 대한 2진수 연산
		
		
		int num1 = 10, num2 = 7;
		
		System.out.printf("%d & %d = %d\n", num1, num2, num1&num2);
		
		/*
		 * 10 =  00001010(2) 
		 *  7 =  00000111(2)
		 *  ----------------
		 *  & => 00000010(2) = 2
		 */ 
		
		System.out.printf("%d | %d = %d\n", num1, num2, num1|num2);
		
		/*
		 * 10 =  00001010(2) 
		 *  7 =  00000111(2)
		 *  ----------------
		 *  | => 00001111(2) = 15
		 */ 
		
		System.out.printf("%d ^ %d = %d\n", num1, num2, num1^num2);
		
		/*
		 * 10 =  00001010(2) 
		 *  7 =  00000111(2)
		 *  ----------------
		 *  ^ => 00001101(2) = 13
		 */ 
		
		System.out.printf("~%d = %d\n", num1,~num1);
		
		/*
		 * 10 = 00001010(2)
		 * ----------------
		 * ~ => 11110101(2)
		 *      부호비트 1 ------> 2의 보수 표현법 
		 * 
		 * 1 1110101(2)
		 * ------------
		 * 1 0001010(2)           ----> 1의 보수 변환 (부호 유지)
		 * +       1(2)           ----> 2의 보수 변환
		 * ------------
		 * 1 0001011(2) = -11     ----> 2의 보수 변환 (절대값 방식)
		 */
		
		System.out.printf("~%d = %d\n", num2,~num2);
		
		/*
		 *  7 = 00000111(2)
		 * ----------------
		 * ~ => 11111000(2)
		 * 
		 * 1 1111000(2) 
		 * ------------
		 * 1 0000111(2)           ----> 1의 보수 변환 (부호 유지)
		 * +       1(2)           ----> 2의 보수 변환
		 * -----------
		 * 1 0001000(2) = -8     ----> 2의 보수 변환 (절대값 방식)
		 */
		
		
		System.out.printf("~%d = %d\n", 1,~1);
		
		/*
		 * 1 =  00000001(2)
		 * ----------------
		 * ~ => 11111110(2)
		 * 
		 * 1 1111110(2)
		 * ------------
		 * 1 0000001(2)
		 * +       1(2)
		 * ------------
		 * 1 0000010(2) = -2
		 */
		
		/*
		 * 1 1111111(2)
		 * ------------
		 * 1 0000000(2)
		 * 1 0000001(2) = -1
		 */
		
	}

}
